

import argparse
import gzip
import os
from pathlib import Path
import pickle

from llm.gemini_provider import GoogleGeminiProvider
import slam
from utils.file_utils import load_json_as_dict

# Credentials
GOOGLE_GEMINI_CREDENTIALS_FILE_PATH = "./credentials/concept-graphs-moncada-a807e893ef12.json"
GOOGLE_GEMINI_PROJECT_ID = "concept-graphs-moncada"
GOOGLE_GEMINI_PROJECT_LOCATION = "us-central1"

# Constants
CAPTIONS_FILENAME = "cfslam_llava_captions.json"


def load_scene_map(map_file_path: str):
    """
    TODO
    WARNING: repeated method
    """
    scene_map = slam.slam_classes.MapObjectList()
    with gzip.open(Path(map_file_path), "rb") as file:

        loaded_data = pickle.load(file)

        if not isinstance(loaded_data, dict):
            raise ValueError("Map file is not a dictionary")
        if not "objects" in loaded_data:
            raise ValueError("Map file does not contain 'objects' key")

        scene_map.load_serializable(loaded_data["objects"])

        print(f"Loaded {len(scene_map)} objects from map file")

    return scene_map


def main(args):

    # Create Gemini instance
    llm_service = GoogleGeminiProvider(credentials_file=GOOGLE_GEMINI_CREDENTIALS_FILE_PATH,
                                       project_id=GOOGLE_GEMINI_PROJECT_ID,
                                       project_location=GOOGLE_GEMINI_PROJECT_LOCATION,
                                       model_name=GoogleGeminiProvider.GEMINI_1_0_PRO_VISION)

    # Load the scene map
    scene_map = load_scene_map(map_file_path=args.map_file_path)

    # Get captions generated by extract_node_captions
    captions_file_path = os.path.join(args.cache_dir_path,
                                      CAPTIONS_FILENAME)
    captions = load_json_as_dict(file_path=captions_file_path)

    # TODO: here!


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="TODO: program description")

    parser.add_argument("--scene-dir-path",
                        "-s",
                        type=str,
                        required=True,
                        help="Path to the scene folder")

    parser.add_argument("--map-file-path",
                        "-m",
                        type=str,
                        required=True,
                        help="Path to the map file")

    # TODO: help
    parser.add_argument("--cache-dir-path",
                        "-c",
                        type=str,
                        required=True,
                        help="")

    args = parser.parse_args()

    main(args)
